// HTML Report Generator Module for VPR Score tracking

// Generate a complete HTML report based on history data
function generateHTMLReport(history) {
  if (!history || !history.length) {
    return '<div class="error">No history data available to generate report</div>';
  }
  
  // Sort history by date (newest first)
  const sortedHistory = [...history].sort((a, b) => new Date(b.date) - new Date(a.date));
  
  let html = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>VPR Score Vulnerability Report</title>
      <style>
        body {
          font-family: Inter, Arial, sans-serif;
          line-height: 1.5;
          color: #e3e6ed;
          background: #181a20;
          margin: 0;
          padding: 20px;
        }
        .report-container {
          max-width: 1200px;
          margin: 0 auto;
          background: #23262f;
          border-radius: 12px;
          padding: 24px;
          box-shadow: 0 2px 16px rgba(0,0,0,0.18);
        }
        h1, h2, h3 {
          color: #fff;
          margin-top: 0;
        }
        h1 {
          border-bottom: 1px solid #353945;
          padding-bottom: 15px;
          margin-bottom: 30px;
        }
        .summary-box {
          background: #181a20;
          border-radius: 8px;
          padding: 15px;
          margin-bottom: 25px;
          border: 1px solid #353945;
        }
        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
          gap: 15px;
          margin-bottom: 30px;
        }
        .stat-card {
          background: #2c2f38;
          border-radius: 8px;
          padding: 15px;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .low { border-left: 4px solid #16c784; }
        .medium { border-left: 4px solid #f3d53c; }
        .high { border-left: 4px solid #f7931a; }
        .critical { border-left: 4px solid #ea3943; }
        .total { border-left: 4px solid #3861fb; }
        .stat-header {
          margin-top: 0;
          font-size: 16px;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .trend-up { color: #16c784; }
        .trend-down { color: #ea3943; }
        .trend-equal { color: #a1a7bb; }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 30px;
        }
        th, td {
          padding: 12px;
          text-align: left;
          border-bottom: 1px solid #353945;
        }
        th {
          background: #2c2f38;
          font-weight: 600;
        }
        .chart-container {
          height: 300px;
          background: #23262f;
          border-radius: 8px;
          padding: 15px;
          margin-bottom: 30px;
          border: 1px solid #353945;
        }
        .footer {
          text-align: center;
          margin-top: 30px;
          color: #b1b5c3;
          font-size: 14px;
        }
        .progress-bar {
          height: 6px;
          background: #353945;
          border-radius: 3px;
          margin-top: 10px;
          overflow: hidden;
        }
        .progress-value {
          height: 100%;
          border-radius: 3px;
        }
        .low-bg { background-color: #16c784; }
        .medium-bg { background-color: #f3d53c; }
        .high-bg { background-color: #f7931a; }
        .critical-bg { background-color: #ea3943; }
        .total-bg { background-color: #3861fb; }
      </style>
    </head>
    <body>
      <div class="report-container">
        <h1>VPR Score Vulnerability Report</h1>
        
        <div class="summary-box">
          <h2>Executive Summary</h2>
          <p>This report presents an analysis of vulnerability scores across ${sortedHistory.length} scans, 
          showing the distribution and trends of vulnerabilities by severity level.</p>
          <p>Report generated on: ${new Date().toLocaleString()}</p>
        </div>
        
        <h2>Latest Scan Results</h2>
        ${generateLatestResults(sortedHistory[0])}
        
        <h2>Historical Trends</h2>
        <div class="chart-container">
          <!-- Chart would be rendered here with JS in a real implementation -->
          <p style="text-align: center; padding-top: 120px; color: #b1b5c3;">
            [Vulnerability Score Trend Chart - See interactive version in the application]
          </p>
        </div>
        
        <h2>Scan History</h2>
        ${generateHistoryTable(sortedHistory)}
        
        <div class="footer">
          <p>Generated by Lonnie's CISA-Army Knife | ${new Date().toLocaleDateString()}</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  return html;
}

// Generate HTML for the latest scan results
function generateLatestResults(latestScan) {
  if (!latestScan) return '<p>No scan data available</p>';
  
  const data = latestScan.data;
  const maxSum = Math.max(
    data.low.sum,
    data.medium.sum,
    data.high.sum,
    data.critical.sum
  );
  
  return `
    <div class="stats-grid">
      <div class="stat-card low">
        <h3 class="stat-header">Low</h3>
        <p>Count: ${data.low.count}</p>
        <p>Sum: ${data.low.sum.toFixed(2)}</p>
        <p>Mean: ${data.low.mean.toFixed(2)}</p>
        <div class="progress-bar">
          <div class="progress-value low-bg" style="width: ${(data.low.sum / maxSum * 100) || 0}%"></div>
        </div>
      </div>
      
      <div class="stat-card medium">
        <h3 class="stat-header">Medium</h3>
        <p>Count: ${data.medium.count}</p>
        <p>Sum: ${data.medium.sum.toFixed(2)}</p>
        <p>Mean: ${data.medium.mean.toFixed(2)}</p>
        <div class="progress-bar">
          <div class="progress-value medium-bg" style="width: ${(data.medium.sum / maxSum * 100) || 0}%"></div>
        </div>
      </div>
      
      <div class="stat-card high">
        <h3 class="stat-header">High</h3>
        <p>Count: ${data.high.count}</p>
        <p>Sum: ${data.high.sum.toFixed(2)}</p>
        <p>Mean: ${data.high.mean.toFixed(2)}</p>
        <div class="progress-bar">
          <div class="progress-value high-bg" style="width: ${(data.high.sum / maxSum * 100) || 0}%"></div>
        </div>
      </div>
      
      <div class="stat-card critical">
        <h3 class="stat-header">Critical</h3>
        <p>Count: ${data.critical.count}</p>
        <p>Sum: ${data.critical.sum.toFixed(2)}</p>
        <p>Mean: ${data.critical.mean.toFixed(2)}</p>
        <div class="progress-bar">
          <div class="progress-value critical-bg" style="width: ${(data.critical.sum / maxSum * 100) || 0}%"></div>
        </div>
      </div>
      
      <div class="stat-card total">
        <h3 class="stat-header">Total</h3>
        <p>Count: ${data.total.count}</p>
        <p>Sum: ${data.total.sum.toFixed(2)}</p>
        <p>Mean: ${data.total.mean.toFixed(2)}</p>
        <div class="progress-bar">
          <div class="progress-value total-bg" style="width: 100%"></div>
        </div>
      </div>
    </div>
  `;
}

// Generate HTML table for scan history
function generateHistoryTable(history) {
  if (!history || !history.length) return '<p>No history data available</p>';
  
  let tableRows = '';
  
  history.forEach(scan => {
    const date = new Date(scan.date).toLocaleDateString();
    const data = scan.data;
    
    tableRows += `
      <tr>
        <td>${date}</td>
        <td>${scan.filename}</td>
        <td>${data.low.count} (${data.low.sum.toFixed(2)})</td>
        <td>${data.medium.count} (${data.medium.sum.toFixed(2)})</td>
        <td>${data.high.count} (${data.high.sum.toFixed(2)})</td>
        <td>${data.critical.count} (${data.critical.sum.toFixed(2)})</td>
        <td>${data.total.count}</td>
        <td>${data.total.sum.toFixed(2)}</td>
      </tr>
    `;
  });
  
  return `
    <table>
      <thead>
        <tr>
          <th>Date</th>
          <th>Filename</th>
          <th>Low (Score)</th>
          <th>Medium (Score)</th>
          <th>High (Score)</th>
          <th>Critical (Score)</th>
          <th>Total Count</th>
          <th>Total Score</th>
        </tr>
      </thead>
      <tbody>
        ${tableRows}
      </tbody>
    </table>
  `;
}

// Download the HTML report as a file
function downloadHTMLReport(history) {
  const html = generateHTMLReport(history);
  const blob = new Blob([html], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = `vpr-report-${new Date().toISOString().slice(0, 10)}.html`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Expose report helpers to browser global
window.generateHTMLReport = generateHTMLReport;
window.downloadHTMLReport = downloadHTMLReport;
